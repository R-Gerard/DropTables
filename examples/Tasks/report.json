{
  "id": "54f9262fb0db29cfff711b99",
  "name": "TaskSet Report",
  "description": "Generates descriptive statistics for TaskSet documents found within a specified date range",
  "author": "r-gerard",
  "language": "GROOVY",
  "template": "<html>\n  <head>\n    <title>TaskSet Report</title>\n    <script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>\n    <script type=\"text/javascript\">\n      google.load(\"visualization\", \"1\", {packages:[\"table\",\"corechart\"]});\n      google.setOnLoadCallback(drawCharts);\n\n      function drawCharts() {\n        drawUsersTable()\n        drawDurationBarChart()\n        drawTimingScatterChart()<% ENVIRONMENTS.keySet().each { env-> %>\n        draw<% print env.capitalize() %>PieChart()<% } %>\n      }\n\n      function drawUsersTable() {\n        var data = new google.visualization.DataTable();\n        data.addColumn('string', 'Name');<% ENVIRONMENTS.keySet().each { env-> %>\n        data.addColumn('number', '<% print env.toUpperCase() %> Successes');\n        data.addColumn('number', '<% print env.toUpperCase() %> Failures');<% } %>\n        data.addColumn('number', 'Total Successes');\n        data.addColumn('number', 'Total Failures');\n        data.addColumn('number', 'Total SubTasks Performed');\n        data.addRows([\n          <% USERS.eachWithIndex { it, i->\n            name= it.key\n            line = \"['$name', \"\n            ENVIRONMENTS.keySet().each {env ->\n              pass = USERS[name][env + '_PASS']\n              fail = USERS[name][env + '_FAIL']\n              line <<= \"$pass, $fail, \"\n            }\n            pass = it.value['PASS']\n            fail = it.value['FAIL']\n            total = it.value['TOTAL']\n            line <<= \"$pass, $fail, $total\"\n            line <<= (i < USERS.size() -1 ? '],' : ']')\n\n            print line\n          } %>\n        ]);\n        var table = new google.visualization.Table(document.getElementById('user_table_div'));\n        table.draw(data, {showRowNumber: true});\n      }\n\n      function drawDurationBarChart() {\n        var data = google.visualization.arrayToDataTable([\n          ['Duration (seconds)', 'Frequency'],\n          <% DURATIONS.eachWithIndex { it, i->\n            key = it.key\n            val = it.value\n            print \"['$key', $val]\" + (i < DURATIONS.size() -1 ? ',' : '')\n          } %>\n        ]);\n        var options = {\n          title: '',\n          hAxis: { title: 'TaskSet Duration (in seconds)' },\n          vAxis: { title: 'Frequency' },\n          legend: { position: 'none' }\n        };\n        var chart = new google.visualization.ColumnChart(document.getElementById('duration_barchart_div'));\n        chart.draw(data, options);\n      }\n\n      function drawTimingScatterChart() {\n        var data = google.visualization.arrayToDataTable([\n          ['Timestamp', 'Total Duration (seconds)', {type: 'string', role: 'tooltip'}, {type: 'string', role: 'style'}],\n          <% TIMESTAMPS.eachWithIndex { it, i->\n            startTime = it['startTime']\n            duration = it['duration']\n            numTasks = it['numSubTasks']\n            status = it['status']\n            color = status == 'PASS' ? 'blue' : 'red'\n            tooltip = '(' + startTime.toString() + '): ' + numTasks + ' tasks performed in ' + duration + ' seconds. Status: ' + status\n            print \"[new Date('$startTime'), $duration, '$tooltip', 'point { fill-color: $color }']\" + (i < TIMESTAMPS.size() -1 ? ',' : '')\n          } %>\n        ]);\n        var options = {\n          title: '',\n          hAxis: { title: 'TaskSet startTime', ticks: [new Date('<% print queryStartTime %>'), new Date('<% print queryEndTime %>')] },\n          vAxis: { title: 'TaskSet Duration (in seconds)' },\n          legend: { position: 'none' }\n        };\n        var chart = new google.visualization.ScatterChart(document.getElementById('time_scatterchart_div'));\n        chart.draw(data, options);\n      }\n<% ENVIRONMENTS.each { env, counts-> %>\n      function draw<% print env.capitalize() %>PieChart() {\n        var data = google.visualization.arrayToDataTable([\n          ['Status', 'Frequency'],\n          ['PASS', <% print counts['PASS'] %>],\n          ['FAIL', <% print counts['FAIL'] %>]\n        ]);\n        var options = {\n          title: 'SubTasks Performed in <% print env.toUpperCase() %>'\n        };\n        var chart = new google.visualization.PieChart(document.getElementById('<% print env.toLowerCase() %>_piechart'));\n        chart.draw(data, options);\n      }\n<% } %>\n    </script>\n  </head>\n  <body bgcolor=\"#FFFFFF\">\n    <h1>TaskSet Report for <% print queryStartTime %> to <% print queryEndTime %></h1>\n    A TaskSet is a set of tasks performed in one or more environments (<% print ENVIRONMENTS.keySet().join(', ') %>).\n    <br>\n    For each environment, the task can be performed if and only if each preceding task in the TaskSet was successful.\n    <h1>SubTask Performers</h1>\n    <div id=\"user_table_div\" style=\"width: 850px; height: 150px;\"></div>\n    <h1>TaskSet Durations</h1>\n    <div id=\"duration_barchart_div\" style=\"width: 600px; height: 300px;\"></div>\n    <h1>TaskSet Durations Over Time</h1>\n    <div id=\"time_scatterchart_div\" style=\"width: 600px; height: 300px;\"></div>\n    <h1>SubTask Success/Failure Rates</h1>\n    <table>\n      <tr>\n        <% ENVIRONMENTS.keySet().each { env-> %><td><div id=\"<% print env.toLowerCase() %>_piechart\" style=\"width: 300px; height: 300px;\"></div></td><% } %>\n      </tr>\n    </table>\n  </body>\n</html>\n",
  "script": "import com.mongodb.*\n\nUSERS = new HashMap()\nDURATIONS = new TreeMap()\nENVIRONMENTS = new LinkedHashMap()\nTIMESTAMPS = []\n\n// Find all documents in the collection where the TaskSet's startTime is in the range [queryStartTime, queryEndTime]\n// Assume all documents in the collection have a valid schema\nquery = new BasicDBObject('startTime', new BasicDBObject('$gte', new Date(queryStartTime)).append('$lte', new Date(queryEndTime)));\ndbCollection = DATASTORE.getDB().getCollection(collection)\ndbCursor = dbCollection.find(query)\nwhile (dbCursor.hasNext()) {\n  dbObject = dbCursor.next()\n\n  startTime = dbObject.get('startTime')\n  endTime = dbObject.get('endTime')\n  duration = (Long) (endTime.getTime() - startTime.getTime()) / 1000\n  if (!DURATIONS.containsKey(duration)) {\n    DURATIONS[duration] = 0\n  }\n  DURATIONS[duration]++\n  TIMESTAMPS.add(['startTime':startTime, 'duration':duration, 'numSubTasks':dbObject.get('tasks').size(), 'status':dbObject.get('status')])\n\n  for (task in dbObject.get('tasks')) {\n    // A metadata map is required by the schema, but it may be empty or incomplete\n    status = task.get('status')\n    metadata = task.get('metadata').toMap()\n\n    if (metadata.containsKey('user')) {\n      user = metadata.get('user')\n      if (!USERS.containsKey(user)) {\n        USERS[user] = ['TOTAL':0, 'PASS':0, 'FAIL':0]\n      }\n      USERS[user]['TOTAL']++\n      USERS[user][status]++\n    }\n\n    if (metadata.containsKey('environment')) {\n      env = metadata.get('environment')\n      if (!ENVIRONMENTS.containsKey(env)) {\n        ENVIRONMENTS[env] = ['PASS':0, 'FAIL':0]\n      }\n      ENVIRONMENTS[env][status]++\n    }\n\n    if (user != null && env != null) {\n      if (!USERS[user].containsKey(env + '_PASS')) {\n        USERS[user][env + '_PASS'] = 0\n        USERS[user][env + '_FAIL'] = 0\n      }\n\n      USERS[user][env + '_' + status]++\n    }\n  }\n\n  // Fill in any missing gaps in the {user x env} matrix to avoid NPEs in the template\n  USERS.keySet().each { user->\n    ENVIRONMENTS.keySet().each { env->\n      if (!USERS[user].containsKey(env + '_PASS')) {\n        USERS[user][env + '_PASS'] = 0\n        USERS[user][env + '_FAIL'] = 0\n      }\n    }\n  }\n}\n",
  "defaultParameters": {
    "collection": "taskSets",
    "queryStartTime": "Sep 8, 2001",
    "queryEndTime": "Dec 18, 2001"
  }
}
